   1              		.file	"prim_freq.c"
   9              	.Ltext0:
  10              		.global	freq_sched_set
  11              		.section	.rodata
  12              		.align	2
  15              	freq_sched_set:
  16 0000 00000000 		.word	l1s_freq_cmd
  17 0004 01       		.byte	1
  18 0005 00       		.byte	0
  19 0006 0000     		.space	2
  20 0008 FDFF     		.short	-3
  21 000a 0000     		.short	0
  22 000c 00000000 		.word	tdma_end_set
  23 0010 00       		.byte	0
  24 0011 00       		.byte	0
  25 0012 00000000 		.space	6
  25      0000
  26              		.section	.rodata.str1.4,"aMS",%progbits,1
  27              		.align	2
  28              	.LC0:
  29 0000 52656163 		.ascii	"Reached starting time, altering frequency set\000"
  29      68656420 
  29      73746172 
  29      74696E67 
  29      2074696D 
  30              		.section	.text.l1s_freq_cmd,"ax",%progbits
  31              		.align	2
  33              	l1s_freq_cmd:
  34              	.LFB67:
  35              		.file 1 "layer1/prim_freq.c"
   1:layer1/prim_freq.c **** /* Layer 1 Frequency redefinition at "starting time" */
   2:layer1/prim_freq.c **** 
   3:layer1/prim_freq.c **** /* (C) 2010 by Andreas Eversverg <jolly@eversberg.eu>
   4:layer1/prim_freq.c ****  *
   5:layer1/prim_freq.c ****  * All Rights Reserved
   6:layer1/prim_freq.c ****  *
   7:layer1/prim_freq.c ****  * This program is free software; you can redistribute it and/or modify
   8:layer1/prim_freq.c ****  * it under the terms of the GNU General Public License as published by
   9:layer1/prim_freq.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:layer1/prim_freq.c ****  * (at your option) any later version.
  11:layer1/prim_freq.c ****  *
  12:layer1/prim_freq.c ****  * This program is distributed in the hope that it will be useful,
  13:layer1/prim_freq.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:layer1/prim_freq.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:layer1/prim_freq.c ****  * GNU General Public License for more details.
  16:layer1/prim_freq.c ****  *
  17:layer1/prim_freq.c ****  * You should have received a copy of the GNU General Public License along
  18:layer1/prim_freq.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  19:layer1/prim_freq.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  20:layer1/prim_freq.c ****  *
  21:layer1/prim_freq.c ****  */
  22:layer1/prim_freq.c **** 
  23:layer1/prim_freq.c **** #include <stdint.h>
  24:layer1/prim_freq.c **** #include <stdio.h>
  25:layer1/prim_freq.c **** #include <string.h>
  26:layer1/prim_freq.c **** #include <stdlib.h>
  27:layer1/prim_freq.c **** 
  28:layer1/prim_freq.c **** #include <defines.h>
  29:layer1/prim_freq.c **** #include <debug.h>
  30:layer1/prim_freq.c **** #include <memory.h>
  31:layer1/prim_freq.c **** #include <byteorder.h>
  32:layer1/prim_freq.c **** #include <osmocom/gsm/gsm_utils.h>
  33:layer1/prim_freq.c **** #include <osmocom/core/msgb.h>
  34:layer1/prim_freq.c **** #include <calypso/dsp_api.h>
  35:layer1/prim_freq.c **** #include <calypso/irq.h>
  36:layer1/prim_freq.c **** #include <calypso/tpu.h>
  37:layer1/prim_freq.c **** #include <calypso/tsp.h>
  38:layer1/prim_freq.c **** #include <calypso/dsp.h>
  39:layer1/prim_freq.c **** #include <calypso/timer.h>
  40:layer1/prim_freq.c **** #include <comm/sercomm.h>
  41:layer1/prim_freq.c **** #include <asm/system.h>
  42:layer1/prim_freq.c **** 
  43:layer1/prim_freq.c **** #include <layer1/sync.h>
  44:layer1/prim_freq.c **** #include <layer1/async.h>
  45:layer1/prim_freq.c **** #include <layer1/tdma_sched.h>
  46:layer1/prim_freq.c **** #include <layer1/tpu_window.h>
  47:layer1/prim_freq.c **** #include <layer1/l23_api.h>
  48:layer1/prim_freq.c **** #include <layer1/sched_gsmtime.h>
  49:layer1/prim_freq.c **** 
  50:layer1/prim_freq.c **** #include <l1ctl_proto.h>
  51:layer1/prim_freq.c **** 
  52:layer1/prim_freq.c **** struct {
  53:layer1/prim_freq.c **** 	uint32_t fn;
  54:layer1/prim_freq.c **** 	uint16_t band_arfcn;
  55:layer1/prim_freq.c **** } last_rach;
  56:layer1/prim_freq.c **** 
  57:layer1/prim_freq.c **** /* if the "starting time" is reached, use frequencies "after time" */
  58:layer1/prim_freq.c **** static int l1s_freq_cmd(__unused uint8_t p1, __unused uint8_t p2, __unused uint16_t p3)
  59:layer1/prim_freq.c **** {
  36              		.loc 1 59 0
  37              		@ args = 0, pretend = 0, frame = 0
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39              	.LVL0:
  40 0000 04E02DE5 		str	lr, [sp, #-4]!
  41              	.LCFI0:
  60:layer1/prim_freq.c **** 	putchart('F');
  61:layer1/prim_freq.c **** 
  62:layer1/prim_freq.c **** 	printf("Reached starting time, altering frequency set\n");
  42              		.loc 1 62 0
  43 0004 38009FE5 		ldr	r0, .L6
  44              	.LVL1:
  45 0008 FEFFFFEB 		bl	puts
  46              	.LVL2:
  63:layer1/prim_freq.c **** 
  64:layer1/prim_freq.c **** 	l1s.dedicated.tsc = l1s.dedicated.st_tsc;
  47              		.loc 1 64 0
  48 000c 34C09FE5 		ldr	ip, .L6+4
  65:layer1/prim_freq.c **** 	l1s.dedicated.h = l1s.dedicated.st_h;
  49              		.loc 1 65 0
  50 0010 960BDCE5 		ldrb	r0, [ip, #2966]	@ zero_extendqisi2
  51              		.loc 1 64 0
  52 0014 943BDCE5 		ldrb	r3, [ip, #2964]	@ zero_extendqisi2
  66:layer1/prim_freq.c **** 	if (l1s.dedicated.h)
  53              		.loc 1 66 0
  54 0018 000050E3 		cmp	r0, #0
  55              		.loc 1 64 0
  56 001c 0D3BCCE5 		strb	r3, [ip, #2829]
  67:layer1/prim_freq.c **** 		memcpy(&l1s.dedicated.h1, &l1s.dedicated.st_h1,
  68:layer1/prim_freq.c **** 			sizeof(l1s.dedicated.h1));
  69:layer1/prim_freq.c **** 	else
  70:layer1/prim_freq.c **** 		memcpy(&l1s.dedicated.h0, &l1s.dedicated.st_h0,
  57              		.loc 1 70 0
  58 0020 983B9C05 		ldreq	r3, [ip, #2968]
  59              		.loc 1 65 0
  60 0024 0F0BCCE5 		strb	r0, [ip, #2831]
  61              		.loc 1 67 0
  62 0028 1C109FE5 		ldr	r1, .L6+8
  63 002c 8420A0E3 		mov	r2, #132
  64 0030 B10E8CE2 		add	r0, ip, #2832
  65              		.loc 1 70 0
  66 0034 103B8C05 		streq	r3, [ip, #2832]
  67              		.loc 1 66 0
  68              		.loc 1 67 0
  69 0038 FEFFFF1B 		blne	memcpy
  70              	.L4:
  71:layer1/prim_freq.c **** 			sizeof(l1s.dedicated.h0));
  72:layer1/prim_freq.c **** 
  73:layer1/prim_freq.c **** 	return 0;
  74:layer1/prim_freq.c **** }
  71              		.loc 1 74 0
  72 003c 0000A0E3 		mov	r0, #0
  73 0040 04F09DE4 		ldr	pc, [sp], #4
  74              	.L7:
  75              		.align	2
  76              	.L6:
  77 0044 00000000 		.word	.LC0
  78 0048 00000000 		.word	l1s
  79 004c 980B0000 		.word	l1s+2968
  80              	.LFE67:
  82              		.global	__umodsi3
  83              		.section	.rodata.str1.4
  84 002e 0000     		.align	2
  85              	.LC1:
  86 0030 53636865 		.ascii	"Scheduling frequency change at fn=%u, currently fn="
  86      64756C69 
  86      6E672066 
  86      72657175 
  86      656E6379 
  87 0063 25750A00 		.ascii	"%u\012\000"
  88 0067 00       		.section	.text.l1a_freq_req,"ax",%progbits
  89              		.align	2
  90              		.global	l1a_freq_req
  92              	l1a_freq_req:
  93              	.LFB68:
  75:layer1/prim_freq.c **** 
  76:layer1/prim_freq.c **** /* sched set for frequency change */
  77:layer1/prim_freq.c **** const struct tdma_sched_item freq_sched_set[] = {
  78:layer1/prim_freq.c **** 	SCHED_ITEM(l1s_freq_cmd, -3, 1, 0),
  79:layer1/prim_freq.c **** 	SCHED_END_SET()
  80:layer1/prim_freq.c **** };
  81:layer1/prim_freq.c **** 
  82:layer1/prim_freq.c **** /* request a frequency change at the given frame number
  83:layer1/prim_freq.c ****  * Note: The fn_sched parameter must be in range 0..42431. */
  84:layer1/prim_freq.c **** void l1a_freq_req(uint32_t fn_sched)
  85:layer1/prim_freq.c **** {
  94              		.loc 1 85 0
  95              		@ args = 0, pretend = 0, frame = 0
  96              		@ frame_needed = 0, uses_anonymous_args = 0
  97              	.LVL3:
  98 0000 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
  99              	.LCFI1:
  86:layer1/prim_freq.c **** 	int32_t diff;
  87:layer1/prim_freq.c **** 	unsigned long flags;
  88:layer1/prim_freq.c **** 
  89:layer1/prim_freq.c **** 	/* We must check here, if the time already elapsed.
  90:layer1/prim_freq.c **** 	 * This is required, because we may have an undefined delay between
  91:layer1/prim_freq.c **** 	 * layer 1 and layer 3.
  92:layer1/prim_freq.c **** 	 */
  93:layer1/prim_freq.c **** 	diff = fn_sched - (l1s.current_time.fn % 42432);
 100              		.loc 1 93 0
 101 0004 A0309FE5 		ldr	r3, .L17
 102 0008 005093E5 		ldr	r5, [r3, #0]
 103              		.loc 1 85 0
 104 000c 0040A0E1 		mov	r4, r0
 105              		.loc 1 93 0
 106 0010 98109FE5 		ldr	r1, .L17+4
 107 0014 0500A0E1 		mov	r0, r5
 108              	.LVL4:
 109 0018 FEFFFFEB 		bl	__umodsi3
  94:layer1/prim_freq.c **** 	if (diff < 0)
 110              		.loc 1 94 0
 111 001c 004054E0 		subs	r4, r4, r0
 112              	.LVL5:
  95:layer1/prim_freq.c **** 		diff += 42432;
 113              		.loc 1 95 0
 114 0020 A54C8442 		addmi	r4, r4, #42240
  96:layer1/prim_freq.c **** 	/* note: 5 is used to give scheduler some time */
  97:layer1/prim_freq.c **** 	if (diff == 5 || diff >= 32024) {
 115              		.loc 1 97 0
 116 0024 88309FE5 		ldr	r3, .L17+8
 117              		.loc 1 95 0
 118 0028 C0408442 		addmi	r4, r4, #192
 119              		.loc 1 97 0
 120 002c 030054E1 		cmp	r4, r3
 121 0030 0030A0D3 		movle	r3, #0
 122 0034 0130A0C3 		movgt	r3, #1
 123 0038 050054E3 		cmp	r4, #5
 124 003c 0360A011 		movne	r6, r3
 125 0040 01608303 		orreq	r6, r3, #1
  98:layer1/prim_freq.c **** 		l1s_freq_cmd(0, 0, 0);
 126              		.loc 1 98 0
 127 0044 0000A0E3 		mov	r0, #0
 128              		.loc 1 97 0
 129 0048 000056E3 		cmp	r6, #0
  99:layer1/prim_freq.c **** 		return;
 100:layer1/prim_freq.c **** 	}
 101:layer1/prim_freq.c **** 
 102:layer1/prim_freq.c **** 	/* calculate (full range) frame number */
 103:layer1/prim_freq.c **** 	fn_sched = l1s.current_time.fn + diff;
 104:layer1/prim_freq.c **** 	if (fn_sched >= GSM_MAX_FN)
 105:layer1/prim_freq.c **** 		fn_sched -= GSM_MAX_FN;
 106:layer1/prim_freq.c **** 	printf("Scheduling frequency change at fn=%u, currently fn=%u\n",
 130              		.loc 1 106 0
 131 004c 0520A0E1 		mov	r2, r5
 132              		.loc 1 98 0
 133 0050 0010A0E1 		mov	r1, r0
 134              		.loc 1 103 0
 135 0054 045085E0 		add	r5, r5, r4
 136              	.LVL6:
 137              		.loc 1 97 0
 138 0058 1800000A 		beq	.L11
 139              		.loc 1 98 0
 140 005c 0020A0E1 		mov	r2, r0
 107:layer1/prim_freq.c **** 		fn_sched, l1s.current_time.fn);
 108:layer1/prim_freq.c **** 
 109:layer1/prim_freq.c **** 	local_firq_save(flags);
 110:layer1/prim_freq.c **** 	sched_gsmtime(freq_sched_set, fn_sched, 0);
 111:layer1/prim_freq.c **** 	local_irq_restore(flags);
 112:layer1/prim_freq.c **** }
 141              		.loc 1 112 0
 142 0060 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 143              		.loc 1 98 0
 144 0064 FEFFFFEA 		b	l1s_freq_cmd
 145              	.L11:
 146              		.loc 1 104 0
 147 0068 48309FE5 		ldr	r3, .L17+12
 148 006c 030055E1 		cmp	r5, r3
 149              		.loc 1 105 0
 150 0070 FF548582 		addhi	r5, r5, #-16777216
 151 0074 D6588582 		addhi	r5, r5, #14024704
 152 0078 095A8582 		addhi	r5, r5, #36864
 153              		.loc 1 106 0
 154 007c 0510A0E1 		mov	r1, r5
 155 0080 34009FE5 		ldr	r0, .L17+16
 156 0084 FEFFFFEB 		bl	printf
 157              	.LBB2:
 158              		.loc 1 109 0
 159 0088 00400FE1 		mrs	r4, cpsr		@ local_firq_save
 160 008c C03084E3 		orr	r3, r4, #0xC0
 161 0090 03F021E1 		msr	cpsr_c, r3
 162              	.LVL7:
 163              	.LBE2:
 164              		.loc 1 110 0
 165 0094 24009FE5 		ldr	r0, .L17+20
 166 0098 0510A0E1 		mov	r1, r5
 167 009c 0620A0E1 		mov	r2, r6
 168 00a0 FEFFFFEB 		bl	sched_gsmtime
 169              	.LVL8:
 170              		.loc 1 111 0
 171 00a4 04F021E1 		msr	cpsr_c, r4		@ local_irq_restore
 172              	
 173              		.loc 1 112 0
 174 00a8 7080BDE8 		ldmfd	sp!, {r4, r5, r6, pc}
 175              	.L18:
 176              		.align	2
 177              	.L17:
 178 00ac 00000000 		.word	l1s
 179 00b0 C0A50000 		.word	42432
 180 00b4 177D0000 		.word	32023
 181 00b8 FF6F2900 		.word	2715647
 182 00bc 30000000 		.word	.LC1
 183 00c0 00000000 		.word	freq_sched_set
 184              	.LFE68:
 186              		.comm	last_rach,8,4
 244              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 prim_freq.c
     /tmp/ccKLM8AS.s:15     .rodata:0000000000000000 freq_sched_set
     /tmp/ccKLM8AS.s:16     .rodata:0000000000000000 $d
     /tmp/ccKLM8AS.s:33     .text.l1s_freq_cmd:0000000000000000 l1s_freq_cmd
     /tmp/ccKLM8AS.s:40     .text.l1s_freq_cmd:0000000000000000 $a
     /tmp/ccKLM8AS.s:77     .text.l1s_freq_cmd:0000000000000044 $d
     /tmp/ccKLM8AS.s:92     .text.l1a_freq_req:0000000000000000 l1a_freq_req
     /tmp/ccKLM8AS.s:98     .text.l1a_freq_req:0000000000000000 $a
     /tmp/ccKLM8AS.s:178    .text.l1a_freq_req:00000000000000ac $d
                            *COM*:0000000000000008 last_rach

UNDEFINED SYMBOLS
tdma_end_set
puts
memcpy
l1s
__umodsi3
printf
sched_gsmtime
