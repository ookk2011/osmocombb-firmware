   1              		.file	"afc.c"
   9              	.Ltext0:
  10              		.data
  11              		.align	2
  14              	afc_state:
  15 0000 2800     		.short	40
  16 0002 0800     		.short	8
  17 0004 00000000 		.space	8
  17      00000000 
  18 000c 00000000 		.word	afc_ravg_output
  19 0010 00000000 		.space	4
  20 0014 44FD     		.short	-700
  21 0016 0000     		.space	2
  22              		.global	__divsi3
  23              		.section	.text.afc_correct,"ax",%progbits
  24              		.align	2
  25              		.global	afc_correct
  27              	afc_correct:
  28              	.LFB6:
  29              		.file 1 "layer1/afc.c"
   1:layer1/afc.c  **** /* AFC (Automatic Frequency Correction) Implementation */
   2:layer1/afc.c  **** 
   3:layer1/afc.c  **** /* (C) 2010 by Harald Welte <laforge@gnumonks.org>
   4:layer1/afc.c  ****  *
   5:layer1/afc.c  ****  * All Rights Reserved
   6:layer1/afc.c  ****  *
   7:layer1/afc.c  ****  * This program is free software; you can redistribute it and/or modify
   8:layer1/afc.c  ****  * it under the terms of the GNU General Public License as published by
   9:layer1/afc.c  ****  * the Free Software Foundation; either version 2 of the License, or
  10:layer1/afc.c  ****  * (at your option) any later version.
  11:layer1/afc.c  ****  *
  12:layer1/afc.c  ****  * This program is distributed in the hope that it will be useful,
  13:layer1/afc.c  ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:layer1/afc.c  ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:layer1/afc.c  ****  * GNU General Public License for more details.
  16:layer1/afc.c  ****  *
  17:layer1/afc.c  ****  * You should have received a copy of the GNU General Public License along
  18:layer1/afc.c  ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  19:layer1/afc.c  ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  20:layer1/afc.c  ****  *
  21:layer1/afc.c  ****  */
  22:layer1/afc.c  **** 
  23:layer1/afc.c  **** #include <stdint.h>
  24:layer1/afc.c  **** #include <stdio.h>
  25:layer1/afc.c  **** 
  26:layer1/afc.c  **** #include <debug.h>
  27:layer1/afc.c  **** #include <osmocom/gsm/gsm_utils.h>
  28:layer1/afc.c  **** 
  29:layer1/afc.c  **** #include <layer1/afc.h>
  30:layer1/afc.c  **** #include <layer1/avg.h>
  31:layer1/afc.c  **** #include <calypso/dsp.h>
  32:layer1/afc.c  **** 
  33:layer1/afc.c  **** #define AFC_INITIAL_DAC_VALUE	-700
  34:layer1/afc.c  **** 
  35:layer1/afc.c  **** /* Over how many TDMA frames do we want to average? (this may change in dedicated mode) */
  36:layer1/afc.c  **** #define AFC_PERIOD		40
  37:layer1/afc.c  **** /* How many of our measurements have to be valid? */
  38:layer1/afc.c  **** #define AFC_MIN_MUN_VALID	8
  39:layer1/afc.c  **** 
  40:layer1/afc.c  **** /* The actual AFC code */
  41:layer1/afc.c  **** 
  42:layer1/afc.c  **** struct afc_state {
  43:layer1/afc.c  **** 	struct running_avg ravg;		/* running average */
  44:layer1/afc.c  **** 	int16_t		dac_value;		/* current DAC output value */
  45:layer1/afc.c  **** 	uint16_t	arfcn;
  46:layer1/afc.c  **** };
  47:layer1/afc.c  **** 
  48:layer1/afc.c  **** static void afc_ravg_output(struct running_avg *ravg, int32_t avg);
  49:layer1/afc.c  **** 
  50:layer1/afc.c  **** static struct afc_state afc_state = {
  51:layer1/afc.c  **** 	.ravg = {
  52:layer1/afc.c  **** 		.outfn = &afc_ravg_output,
  53:layer1/afc.c  **** 		.period = AFC_PERIOD,
  54:layer1/afc.c  **** 		.min_valid = AFC_MIN_MUN_VALID,
  55:layer1/afc.c  **** 	},
  56:layer1/afc.c  **** 	.dac_value = AFC_INITIAL_DAC_VALUE,
  57:layer1/afc.c  **** };
  58:layer1/afc.c  **** 
  59:layer1/afc.c  **** /* The AFC DAC in the ABB has to be configured as follows:
  60:layer1/afc.c  ****  * DAC = 1MHz / 947MHz * FreqErr(Hz) / AFCslop(ppm/LSB)
  61:layer1/afc.c  ****  * where:
  62:layer1/afc.c  ****  *	947 MHz is the center of EGSM
  63:layer1/afc.c  ****  *	AFCslope is coded F1.15, thus a normalization factor of 2^15 applies
  64:layer1/afc.c  ****  */
  65:layer1/afc.c  **** 
  66:layer1/afc.c  **** #define AFC_NORM_FACTOR_GSM	((1<<15) / 947)
  67:layer1/afc.c  **** #define AFC_NORM_FACTOR_DCS	((1<<15) / 1894)
  68:layer1/afc.c  **** 
  69:layer1/afc.c  **** /* we assume 8.769ppb per LSB, equals 0.008769 * 32768 == 287 */
  70:layer1/afc.c  **** //#define AFC_SLOPE		320
  71:layer1/afc.c  **** #define AFC_SLOPE		287
  72:layer1/afc.c  **** 
  73:layer1/afc.c  **** /* The DSP can measure the frequency error in the following ranges:
  74:layer1/afc.c  ****  * 	FB_MODE0:	+/- 20 kHz
  75:layer1/afc.c  ****  *	FB_MODE1:	+/-  4 kHz
  76:layer1/afc.c  ****  *	Sync Burst:	+/-  1 kHz
  77:layer1/afc.c  ****  *	Normal Burst:	+/- 400 Hz
  78:layer1/afc.c  ****  */
  79:layer1/afc.c  **** 
  80:layer1/afc.c  **** /* Update the AFC with a frequency error, bypassing averaging */
  81:layer1/afc.c  **** void afc_correct(int16_t freq_error, uint16_t arfcn)
  82:layer1/afc.c  **** {
  30              		.loc 1 82 0
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 0118A0E1 		mov	r1, r1, asl #16
  35              	.LVL1:
  36 0004 10402DE9 		stmfd	sp!, {r4, lr}
  37              	.LCFI0:
  38              		.loc 1 82 0
  39 0008 0048A0E1 		mov	r4, r0, asl #16
  83:layer1/afc.c  **** 	int32_t afc_norm_factor;
  84:layer1/afc.c  **** 	int16_t delta;
  85:layer1/afc.c  **** 
  86:layer1/afc.c  **** 	switch (gsm_arfcn2band(arfcn)) {
  40              		.loc 1 86 0
  41 000c 2108A0E1 		mov	r0, r1, lsr #16
  42              	.LVL2:
  43 0010 FEFFFFEB 		bl	gsm_arfcn2band
  44              	.LVL3:
  45              		.loc 1 82 0
  46 0014 2448A0E1 		mov	r4, r4, lsr #16
  47              	.LVL4:
  48              		.loc 1 86 0
  49 0018 010040E2 		sub	r0, r0, #1
  50 001c 010050E3 		cmp	r0, #1
  87:layer1/afc.c  **** 	case GSM_BAND_900:
  88:layer1/afc.c  **** 	case GSM_BAND_850:
  89:layer1/afc.c  **** 		afc_norm_factor = AFC_NORM_FACTOR_GSM;
  90:layer1/afc.c  **** 		break;
  91:layer1/afc.c  **** 	default:
  92:layer1/afc.c  **** 		afc_norm_factor = AFC_NORM_FACTOR_DCS;
  93:layer1/afc.c  **** 	}
  94:layer1/afc.c  **** 
  95:layer1/afc.c  **** 	delta = (int16_t) ((afc_norm_factor * (int32_t)freq_error) / AFC_SLOPE);
  96:layer1/afc.c  **** 	printd("afc_correct(error=%dHz, arfcn=%u): delta=%d, afc_dac(old=%d,new=%d)\n",
  97:layer1/afc.c  **** 		freq_error, arfcn, delta, afc_state.dac_value, afc_state.dac_value+delta);
  98:layer1/afc.c  **** 	afc_state.dac_value += delta;
  51              		.loc 1 98 0
  52 0020 0448A0E1 		mov	r4, r4, asl #16
  53              	.LVL5:
  54              		.loc 1 86 0
  55 0024 1100A083 		movhi	r0, #17
  56              	.LVL6:
  57 0028 2200A093 		movls	r0, #34
  58              		.loc 1 98 0
  59 002c 4448A0E1 		mov	r4, r4, asr #16
  60 0030 44109FE5 		ldr	r1, .L11
  61 0034 940000E0 		mul	r0, r4, r0
  62              	.LVL7:
  63 0038 FEFFFFEB 		bl	__divsi3
  64 003c 3C109FE5 		ldr	r1, .L11+4
  65 0040 B431D1E1 		ldrh	r3, [r1, #20]
  66 0044 003083E0 		add	r3, r3, r0
  67 0048 0338A0E1 		mov	r3, r3, asl #16
  68 004c 2338A0E1 		mov	r3, r3, lsr #16
  99:layer1/afc.c  **** 
 100:layer1/afc.c  **** 	/* The AFC DAC has only 13 bits */
 101:layer1/afc.c  **** 	if (afc_state.dac_value > 4095)
  69              		.loc 1 101 0
  70 0050 0328A0E1 		mov	r2, r3, asl #16
  71 0054 4228A0E1 		mov	r2, r2, asr #16
  72 0058 010A52E3 		cmp	r2, #4096
  73              		.loc 1 98 0
  74 005c B431C1E1 		strh	r3, [r1, #20]	@ movhi
 102:layer1/afc.c  **** 		afc_state.dac_value = 4095;
  75              		.loc 1 102 0
  76 0060 0F3AE0A3 		mvnge	r3, #61440
  77              		.loc 1 101 0
  78 0064 1B0000AA 		bge	.L10
 103:layer1/afc.c  **** 	else if (afc_state.dac_value < -4096)
  79              		.loc 1 103 0
  80 0068 010A72E3 		cmn	r2, #4096
  81 006c 1080BDA8 		ldmgefd	sp!, {r4, pc}
 104:layer1/afc.c  **** 		afc_state.dac_value = -4096;
  82              		.loc 1 104 0
  83 0070 0F3AA0E3 		mov	r3, #61440
  84              	.L10:
  85 0074 B431C1E1 		strh	r3, [r1, #20]	@ movhi
  86 0078 1080BDE8 		ldmfd	sp!, {r4, pc}
  87              	.L12:
  88              		.align	2
  89              	.L11:
  90 007c 1F010000 		.word	287
  91 0080 00000000 		.word	afc_state
  92              	.LFE6:
  94              		.section	.text.afc_reset,"ax",%progbits
  95              		.align	2
  96              		.global	afc_reset
  98              	afc_reset:
  99              	.LFB7:
 105:layer1/afc.c  **** }
 106:layer1/afc.c  **** 
 107:layer1/afc.c  **** void afc_reset(void)
 108:layer1/afc.c  **** {
 100              		.loc 1 108 0
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              		@ link register save eliminated.
 104              	.LVL8:
 109:layer1/afc.c  **** 	afc_state.dac_value = AFC_INITIAL_DAC_VALUE;
 105              		.loc 1 109 0
 106 0000 08209FE5 		ldr	r2, .L15
 107 0004 08309FE5 		ldr	r3, .L15+4
 108              		.loc 1 108 0
 109              		@ lr needed for prologue
 110              		.loc 1 109 0
 111 0008 B421C3E1 		strh	r2, [r3, #20]	@ movhi
 110:layer1/afc.c  **** }
 112              		.loc 1 110 0
 113 000c 1EFF2FE1 		bx	lr
 114              	.L16:
 115              		.align	2
 116              	.L15:
 117 0010 44FDFFFF 		.word	-700
 118 0014 00000000 		.word	afc_state
 119              	.LFE7:
 121              		.section	.text.afc_input,"ax",%progbits
 122              		.align	2
 123              		.global	afc_input
 125              	afc_input:
 126              	.LFB8:
 111:layer1/afc.c  **** 
 112:layer1/afc.c  **** void afc_input(int32_t freq_error, uint16_t arfcn, int valid)
 113:layer1/afc.c  **** {
 127              		.loc 1 113 0
 128              		@ args = 0, pretend = 0, frame = 0
 129              		@ frame_needed = 0, uses_anonymous_args = 0
 130              	.LVL9:
 131 0000 10402DE9 		stmfd	sp!, {r4, lr}
 132              	.LCFI1:
 114:layer1/afc.c  **** 	afc_state.arfcn = arfcn;
 133              		.loc 1 114 0
 134 0004 18409FE5 		ldr	r4, .L19
 135 0008 B611C4E1 		strh	r1, [r4, #22]	@ movhi
 115:layer1/afc.c  **** 	runavg_input(&afc_state.ravg, freq_error, valid);
 136              		.loc 1 115 0
 137 000c 0010A0E1 		mov	r1, r0
 138              	.LVL10:
 139 0010 0400A0E1 		mov	r0, r4
 140              	.LVL11:
 141 0014 FEFFFFEB 		bl	runavg_input
 142              	.LVL12:
 116:layer1/afc.c  **** 	runavg_check_output(&afc_state.ravg);
 143              		.loc 1 116 0
 144 0018 0400A0E1 		mov	r0, r4
 117:layer1/afc.c  **** }
 145              		.loc 1 117 0
 146 001c 1040BDE8 		ldmfd	sp!, {r4, lr}
 147              		.loc 1 116 0
 148 0020 FEFFFFEA 		b	runavg_check_output
 149              	.L20:
 150              		.align	2
 151              	.L19:
 152 0024 00000000 		.word	afc_state
 153              	.LFE8:
 155              		.section	.text.afc_ravg_output,"ax",%progbits
 156              		.align	2
 158              	afc_ravg_output:
 159              	.LFB9:
 118:layer1/afc.c  **** 
 119:layer1/afc.c  **** /* callback function for runavg */
 120:layer1/afc.c  **** static void afc_ravg_output(struct running_avg *ravg, int32_t avg)
 121:layer1/afc.c  **** {
 160              		.loc 1 121 0
 161              		@ args = 0, pretend = 0, frame = 0
 162              		@ frame_needed = 0, uses_anonymous_args = 0
 163              		@ link register save eliminated.
 164              	.LVL13:
 122:layer1/afc.c  **** 	afc_correct(avg, afc_state.arfcn);
 165              		.loc 1 122 0
 166 0000 0C309FE5 		ldr	r3, .L23
 167 0004 0118A0E1 		mov	r1, r1, asl #16
 168              	.LVL14:
 169 0008 4108A0E1 		mov	r0, r1, asr #16
 170              	.LVL15:
 171 000c B611D3E1 		ldrh	r1, [r3, #22]
 172              		.loc 1 121 0
 173              		@ lr needed for prologue
 123:layer1/afc.c  **** }
 174              		.loc 1 123 0
 175              		.loc 1 122 0
 176 0010 FEFFFFEA 		b	afc_correct
 177              	.L24:
 178              		.align	2
 179              	.L23:
 180 0014 00000000 		.word	afc_state
 181              	.LFE9:
 183              		.section	.text.afc_load_dsp,"ax",%progbits
 184              		.align	2
 185              		.global	afc_load_dsp
 187              	afc_load_dsp:
 188              	.LFB10:
 124:layer1/afc.c  **** 
 125:layer1/afc.c  **** /* Update DSP with new AFC DAC value to be used for next TDMA frame */
 126:layer1/afc.c  **** void afc_load_dsp(void)
 127:layer1/afc.c  **** {
 189              		.loc 1 127 0
 190              		@ args = 0, pretend = 0, frame = 0
 191              		@ frame_needed = 0, uses_anonymous_args = 0
 192              		@ link register save eliminated.
 193              	.LVL16:
 128:layer1/afc.c  **** 	dsp_api.db_w->d_afc = afc_state.dac_value;
 194              		.loc 1 128 0
 195 0000 1C309FE5 		ldr	r3, .L27
 196 0004 081093E5 		ldr	r1, [r3, #8]
 197 0008 18209FE5 		ldr	r2, .L27+4
 129:layer1/afc.c  **** 	dsp_api.db_w->d_ctrl_abb |= (1 << B_AFC);
 198              		.loc 1 129 0
 199 000c B631D1E1 		ldrh	r3, [r1, #22]
 200              		.loc 1 128 0
 201 0010 B421D2E1 		ldrh	r2, [r2, #20]
 202              		.loc 1 129 0
 203 0014 103083E3 		orr	r3, r3, #16
 204              		.loc 1 127 0
 205              		@ lr needed for prologue
 206              		.loc 1 128 0
 207 0018 BE21C1E1 		strh	r2, [r1, #30]	@ movhi
 208              		.loc 1 129 0
 209 001c B631C1E1 		strh	r3, [r1, #22]	@ movhi
 130:layer1/afc.c  **** }
 210              		.loc 1 130 0
 211 0020 1EFF2FE1 		bx	lr
 212              	.L28:
 213              		.align	2
 214              	.L27:
 215 0024 00000000 		.word	dsp_api
 216 0028 00000000 		.word	afc_state
 217              	.LFE10:
 296              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 afc.c
     /tmp/ccWWh1N7.s:14     .data:0000000000000000 afc_state
     /tmp/ccWWh1N7.s:18     .data:000000000000000c $d
     /tmp/ccWWh1N7.s:158    .text.afc_ravg_output:0000000000000000 afc_ravg_output
     /tmp/ccWWh1N7.s:27     .text.afc_correct:0000000000000000 afc_correct
     /tmp/ccWWh1N7.s:34     .text.afc_correct:0000000000000000 $a
     /tmp/ccWWh1N7.s:90     .text.afc_correct:000000000000007c $d
     /tmp/ccWWh1N7.s:98     .text.afc_reset:0000000000000000 afc_reset
     /tmp/ccWWh1N7.s:106    .text.afc_reset:0000000000000000 $a
     /tmp/ccWWh1N7.s:117    .text.afc_reset:0000000000000010 $d
     /tmp/ccWWh1N7.s:125    .text.afc_input:0000000000000000 afc_input
     /tmp/ccWWh1N7.s:131    .text.afc_input:0000000000000000 $a
     /tmp/ccWWh1N7.s:152    .text.afc_input:0000000000000024 $d
     /tmp/ccWWh1N7.s:166    .text.afc_ravg_output:0000000000000000 $a
     /tmp/ccWWh1N7.s:180    .text.afc_ravg_output:0000000000000014 $d
     /tmp/ccWWh1N7.s:187    .text.afc_load_dsp:0000000000000000 afc_load_dsp
     /tmp/ccWWh1N7.s:195    .text.afc_load_dsp:0000000000000000 $a
     /tmp/ccWWh1N7.s:215    .text.afc_load_dsp:0000000000000024 $d

UNDEFINED SYMBOLS
__divsi3
gsm_arfcn2band
runavg_input
runavg_check_output
dsp_api
